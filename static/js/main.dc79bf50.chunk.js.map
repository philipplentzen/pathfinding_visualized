{"version":3,"sources":["reportWebVitals.ts","styles/GlobalStyle.tsx","serviceWorker.ts","types/EditMode.ts","classes/node/Node.ts","classes/node/EmptyNode.ts","classes/node/WallNode.ts","classes/node/StartNode.ts","classes/node/TargetNode.ts","components/Grid/GridTable.ts","components/Grid/GridRow.ts","components/Grid/GridCell.ts","components/Grid/GridContainer.ts","classes/algorithm/Algorithm.ts","classes/node/ShortestNode.ts","types/PathfindingAlgorithms.ts","classes/node/path/PathNode.ts","classes/node/path/QueuedNode.ts","classes/node/path/PathTargetNode.ts","classes/node/path/VisitedNode.ts","classes/node/path/PathStartNode.ts","classes/algorithm/pathfinding/BreadthFirstSearch.ts","classes/algorithm/maze/MazeAlgorithm.ts","types/MazeAlgorithms.ts","classes/algorithm/maze/RecursiveDivisionAlgorithm.ts","components/Context/SettingsContext.tsx","components/Context/EditModeContext.tsx","components/Context/AlgoirthmContext.tsx","classes/algorithm/pathfinding/DepthFirstSearch.ts","components/Grid/Grid.tsx","components/SelectionBar.tsx","components/Legend.tsx","components/Settings.tsx","components/Header.tsx","components/Layout.tsx","pages/AlgorithmPage.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","EditMode","Node","row","column","this","EmptyNode","WallNode","StartNode","TargetNode","GridTable","styled","div","GridRow","GridCell","props","pixelSize","GridContainer","Algorithm","toUpdate","grid","speed","length","isStopped","undefined","node","shift","document","getElementById","getId","classList","add","toString","split","getRow","getColumn","Promise","resolve","setTimeout","PathfindingAlgorithms","ShortestNode","PathNode","prevNode","QueuedNode","PathTargetNode","VisitedNode","PathStartNode","BreadthFirstSearch","startNode","cleanGrid","_","steps","queue","currentNode","push","getPrevNode","operations","forEach","deltaRow","deltaColumn","newRow","newColumn","newNode","draw","newGrid","MazeAlgorithms","MazeAlgorithm","height","width","min","max","random","Math","floor","RecursiveDivisionAlgorithm","generateOuterWalls","generateInnerWalls","minRow","maxRow","minColumn","maxColumn","direction","generateRandomEven","opening","generateRandomOdd","SettingsContext","React","createContext","settings","shown","legendShown","setSettings","EditModeContext","editMode","DRAG","setEditMode","AlgorithmContext","isRunnable","isRunning","hasChanges","hasPath","setIsRunnable","setIsRunning","setHasChanges","setHasPath","DepthFirstSearch","stack","pop","Grid","forwardRef","refs","useState","setGrid","useContext","calculatedPixelSize","useRef","isPressed","isDrawing","targetNode","nodesToUpdate","useMemo","useImperativeHandle","runAlgorithm","clearAll","clearPath","useCallback","a","oldGrid","produce","rowId","colId","current","oldCell","algorithm","BREADTH","DEPTH","RECURSIVE_MAZE","run","buildGrid","element","rows","clientHeight","cols","clientWidth","Array","from","value","handleMouseDown","event","preventDefault","WALLS","isPresent","currentTarget","toggle","START","TARGET","handleMouseOver","remove","handleMouseUp","ref","wheel","step","pan","disabled","map","nodes","className","id","onMouseDown","onMouseOver","onMouseUp","DoubleRightOutlined","LoginOutlined","Container","SelectionBar","onClickClearAll","onClickClearPath","onClickCreateMaze","type","size","onClick","icon","DragOutlined","PlusSquareOutlined","BuildOutlined","RiseOutlined","danger","CloseOutlined","oldSettings","newSettings","SettingOutlined","Wall","Shortest","Legend","title","extra","Link","Text","Settings","setPixelSize","handleCancelClick","handleOkClick","visible","onCancel","onOk","gutter","span","defaultValue","onChange","checked","HeaderContainer","header","GithubLink","Header","onClickRunPathfinding","setAlgorithm","handleRunPathfinding","Title","level","style","marginBottom","href","target","GithubOutlined","InfoCircleOutlined","display","placeholder","onSelect","Object","entries","key","Option","Content","main","Layout","children","AlgorithmPage","gridRef","handleRunAlgorithm","handleClearAll","handleClearPath","algorithmContext","Provider","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc79bf50.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createGlobalStyle} from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  @keyframes test {\r\n    from {transform: scale(0)}\r\n    to {transform: scale(1)}\r\n  }\r\n        \r\n  :root {\r\n    --background: #ffffff;\r\n    --background-dark: #fafafa;\r\n    --hover: #40a9ff;\r\n    --border: 1px solid rgba(0, 0, 0, 0.06);\r\n    --shadow: 0 6px 16px -8px rgba(0, 0, 0, .08), 0 9px 28px 0 rgba(0, 0, 0, .05), 0 12px 48px 16px rgba(0, 0, 0, .03);\r\n  }\r\n`;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","export enum EditMode {\r\n    DRAG = \"drag\",\r\n    START = \"start\",\r\n    TARGET = \"target\",\r\n    WALLS = \"walls\",\r\n}","export abstract class Node {\r\n    private row: number;\r\n    private column: number;\r\n\r\n    constructor(row: number, column: number) {\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n\r\n    public getRow(): number {\r\n        return this.row;\r\n    }\r\n\r\n    public getColumn(): number {\r\n        return this.column;\r\n    }\r\n\r\n    public getId(): string {\r\n        return this.row + \"-\" + this.column;\r\n    }\r\n\r\n    public abstract toString(): string;\r\n}","import {Node} from \"./Node\";\r\n\r\nexport class EmptyNode extends Node {\r\n    public toString(): string {\r\n        return \"empty\";\r\n    }\r\n\r\n}","import {Node} from \"./Node\";\r\n\r\nexport class WallNode extends Node {\r\n    public toString(): string {\r\n        return \"wall\";\r\n    }\r\n\r\n}","import {Node} from \"./Node\";\r\n\r\nexport class StartNode extends Node {\r\n    public toString(): string {\r\n        return \"start\";\r\n    }\r\n\r\n}","import {Node} from \"./Node\";\r\n\r\nexport class TargetNode extends Node {\r\n    public toString(): string {\r\n        return \"target\";\r\n    }\r\n\r\n}","import styled from \"styled-components\";\r\n\r\nexport const GridTable = styled.div`\r\n    display: table;\r\n    border-collapse: collapse;\r\n    margin: auto;\r\n    width: fit-content;\r\n    height: fit-content;\r\n`","import styled from \"styled-components\";\r\n\r\nexport const GridRow = styled.div`\r\n    display: table-row;\r\n    box-sizing: border-box;\r\n`","import styled from \"styled-components\";\r\n\r\ninterface IGridCellProps {\r\n    pixelSize: number;\r\n}\r\n\r\nexport const GridCell = styled.div<IGridCellProps>`\r\n  position: relative;\r\n  display: table-cell;\r\n  width: ${props => props.pixelSize}px;\r\n  height: ${props => props.pixelSize}px;\r\n\r\n  font-size: ${props => props.pixelSize / 2}px;\r\n  line-height: ${props => props.pixelSize - 1}px;\r\n  text-align: center;\r\n\r\n  box-sizing: border-box;\r\n  border: 1px solid #dddddd;\r\n  cursor: pointer;\r\n\r\n  transform: scale(0);\r\n\r\n  transition: all ease 300ms;\r\n\r\n  &:hover {\r\n    transform: scale(1);\r\n    transition: none;\r\n    background-color: var(--hover);\r\n  }\r\n\r\n  &.wall {\r\n    background-color: #262626;\r\n    transition: transform ease 300ms;\r\n  }\r\n  \r\n  &.start, &.target {\r\n    transition: none;\r\n  }\r\n\r\n  &.queued {\r\n    background-color: #006d75;\r\n    transition: transform ease 300ms;\r\n  }\r\n\r\n  &.visited, &.breadth {\r\n    background-color: #87e8de;\r\n    transition: background-color ease 300ms;\r\n  }\r\n\r\n  &.shortest {\r\n    background-color: #ff4d4f;\r\n  }\r\n\r\n  &.start, &.target, &.wall, &.queued, &.visited, &.shortest, &.breadth {\r\n    transform: scale(1);\r\n  }\r\n`","import styled from \"styled-components\";\r\n\r\nexport const GridContainer = styled.div`\r\n    width: 100%;\r\n    height: calc(100% - 40px);\r\n  \r\n    display: flex;\r\n    justify-content: center;\r\n    align-content: center;\r\n  \r\n    background: var(--background-dark);\r\n`","import {Node} from \"../node/Node\";\r\n\r\nexport abstract class Algorithm {\r\n    public static isStopped: boolean = false;\r\n\r\n    protected static async draw(toUpdate: Node[], grid: Node[][], speed: number): Promise<Node[][]> {\r\n        while (toUpdate.length > 0) {\r\n            if (Algorithm.isStopped) {\r\n                Algorithm.isStopped = false;\r\n                return grid;\r\n            }\r\n\r\n            const node = toUpdate.shift();\r\n            if (node !== undefined) {\r\n                document.getElementById(node.getId())!.classList.add(...node.toString().split(\" \"));\r\n                grid[node.getRow()][node.getColumn()] = node;\r\n\r\n                await new Promise(resolve => setTimeout(resolve, speed));\r\n            }\r\n        }\r\n\r\n        return grid;\r\n    }\r\n}","import {Node} from \"./Node\";\r\n\r\nexport class ShortestNode extends Node {\r\n    public toString(): string {\r\n        return \"shortest\";\r\n    }\r\n\r\n}","export enum PathfindingAlgorithms {\r\n    BREADTH = \"Breadth First Search\",\r\n    DEPTH = \"Depth First Search\",\r\n    // DIJKSTRA = \"Dijkstra\",\r\n    // ASTAR = \"A*\",\r\n}","import {Node} from \"../Node\";\r\n\r\nexport class PathNode extends Node {\r\n    private readonly prevNode: Node;\r\n\r\n    constructor(row: number, column: number, prevNode: Node) {\r\n        super(row, column);\r\n        this.prevNode = prevNode;\r\n    }\r\n\r\n    public getPrevNode(): Node {\r\n        return this.prevNode;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"path\";\r\n    }\r\n}","import {PathNode} from \"./PathNode\";\r\n\r\nexport class QueuedNode extends PathNode {\r\n    public toString(): string {\r\n        return \"queued\";\r\n    }\r\n}","import {TargetNode} from \"../TargetNode\";\r\nimport {Node} from \"../Node\";\r\n\r\nexport class PathTargetNode extends TargetNode {\r\n    private prevNode: Node;\r\n\r\n    constructor(row: number, column: number, prevNode: Node) {\r\n        super(row, column);\r\n        this.prevNode = prevNode;\r\n    }\r\n\r\n    public getPrevNode(): Node {\r\n        return this.prevNode;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"shortest target\";\r\n    }\r\n\r\n}","import {PathNode} from \"./PathNode\";\r\n\r\nexport class VisitedNode extends PathNode {\r\n    public toString(): string {\r\n        return \"visited\";\r\n    }\r\n}","import {StartNode} from \"../StartNode\";\r\n\r\nexport class PathStartNode extends StartNode {\r\n    public toString(): string {\r\n        return \"shortest start\";\r\n    }\r\n\r\n}","import {Algorithm} from \"../Algorithm\";\r\nimport {Node} from \"../../node/Node\";\r\nimport {TargetNode} from \"../../node/TargetNode\";\r\nimport {EmptyNode} from \"../../node/EmptyNode\";\r\nimport {ShortestNode} from \"../../node/ShortestNode\";\r\nimport * as _ from \"lodash\";\r\nimport {StartNode} from \"../../node/StartNode\";\r\nimport {QueuedNode} from \"../../node/path/QueuedNode\";\r\nimport {PathTargetNode} from \"../../node/path/PathTargetNode\";\r\nimport {PathNode} from \"../../node/path/PathNode\";\r\nimport {VisitedNode} from \"../../node/path/VisitedNode\";\r\nimport {PathStartNode} from \"../../node/path/PathStartNode\";\r\n\r\nexport class BreadthFirstSearch extends Algorithm {\r\n    private static operations: [number, number][] = [\r\n        [-1, 0],\r\n        [0, 1],\r\n        [1, 0],\r\n        [0, -1]\r\n    ];\r\n\r\n    public static async run(startNode: StartNode, grid: Node[][], speed: number): Promise<[Node[][], number]> {\r\n        const cleanGrid = _.cloneDeep(grid);\r\n        let steps = 0;\r\n        const queue: Node[] = [startNode];\r\n        const toUpdate: Node[] = [];\r\n\r\n        while (queue.length > 0) {\r\n            steps++;\r\n            const currentNode = queue.shift();\r\n            if (currentNode !== undefined) {\r\n                if (currentNode instanceof QueuedNode) {\r\n                    toUpdate.push(new VisitedNode(currentNode.getRow(), currentNode.getColumn(), currentNode.getPrevNode()));\r\n                } else if (currentNode instanceof PathTargetNode) {\r\n                    let prevNode = currentNode.getPrevNode();\r\n\r\n                    while (prevNode instanceof PathNode) {\r\n                        toUpdate.push(new ShortestNode(prevNode.getRow(), prevNode.getColumn()));\r\n                        prevNode = prevNode.getPrevNode();\r\n                    }\r\n\r\n                    toUpdate.push(new PathStartNode(prevNode.getRow(), prevNode.getColumn()));\r\n\r\n                    break;\r\n                }\r\n\r\n                this.operations.forEach(([deltaRow, deltaColumn]) => {\r\n                    const newRow = currentNode.getRow() + deltaRow;\r\n                    const newColumn = currentNode.getColumn() + deltaColumn;\r\n\r\n                    if (newRow >= 0 && newRow < grid.length && newColumn >= 0 && newColumn < grid[0].length) {\r\n                        let newNode = grid[newRow][newColumn];\r\n\r\n                        if (newNode instanceof TargetNode) {\r\n                            newNode = new PathTargetNode(newRow, newColumn, currentNode);\r\n                        } else if (newNode instanceof EmptyNode) {\r\n                            newNode = new QueuedNode(newRow, newColumn, currentNode);\r\n                        }\r\n\r\n                        if (newNode !== grid[newRow][newColumn]) {\r\n                            grid[newRow][newColumn] = newNode;\r\n                            toUpdate.push(newNode);\r\n                            queue.push(newNode);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const newGrid = await BreadthFirstSearch.draw(toUpdate, cleanGrid, speed);\r\n\r\n        return [newGrid, steps];\r\n    }\r\n}","import {Algorithm} from \"../Algorithm\";\r\nimport {Node} from \"../../node/Node\";\r\nimport {WallNode} from \"../../node/WallNode\";\r\n\r\nexport class MazeAlgorithm extends Algorithm {\r\n    protected static generateOuterWalls(toUpdate: Node[], height: number, width: number): void {\r\n        for (let column = 0; column < width; column++) {\r\n            toUpdate.push(new WallNode(0, column));\r\n            toUpdate.push(new WallNode(height - 1, width - column - 1));\r\n        }\r\n        for (let row = 1; row < height - 1; row++) {\r\n            toUpdate.push(new WallNode(row, 0));\r\n            toUpdate.push(new WallNode(height - row - 1, width - 1));\r\n        }\r\n    }\r\n\r\n    protected static generateRandomOdd(min: number, max: number): number {\r\n        let random = Math.floor(Math.floor(Math.random() * (max - min + 1) + min) / 2) * 2 + 1;\r\n\r\n        if (random < min) {\r\n            random += 2;\r\n        }\r\n        if (random > max) {\r\n            random -= 2;\r\n        }\r\n\r\n        return random;\r\n    }\r\n\r\n    protected static generateRandomEven(min: number, max: number): number {\r\n        let random = Math.floor(Math.floor(Math.random() * (max - min + 1) + min) / 2) * 2;\r\n\r\n        if (random < min) {\r\n            random += 2;\r\n        }\r\n        if (random > max) {\r\n            random -= 2;\r\n        }\r\n\r\n        return random;\r\n    }\r\n}","export enum MazeAlgorithms {\r\n    RECURSIVE_MAZE = \"Recursive Maze\"\r\n}","import {Node} from \"../../node/Node\";\r\nimport {WallNode} from \"../../node/WallNode\";\r\nimport {MazeAlgorithm} from \"./MazeAlgorithm\";\r\n\r\nexport class RecursiveDivisionAlgorithm extends MazeAlgorithm {\r\n    public static async run(grid: Node[][]): Promise<Node[][]> {\r\n        const width = grid[0].length;\r\n        const height = grid.length;\r\n\r\n        const toUpdate: Node[] = [];\r\n        RecursiveDivisionAlgorithm.generateOuterWalls(toUpdate, height, width);\r\n        RecursiveDivisionAlgorithm.generateInnerWalls(toUpdate, 1, height - 2, 1, width - 2, \"horizontal\");\r\n        return await RecursiveDivisionAlgorithm.draw(toUpdate, grid, 0);\r\n    }\r\n\r\n    private static generateInnerWalls(toUpdate: Node[], minRow: number, maxRow: number, minColumn: number, maxColumn: number, direction: \"horizontal\" | \"vertical\"): void {\r\n        if (direction === \"vertical\") {\r\n            if (maxRow - minRow < 2) return;\r\n\r\n            const column = RecursiveDivisionAlgorithm.generateRandomEven(minColumn, maxColumn);\r\n            const opening = RecursiveDivisionAlgorithm.generateRandomOdd(minRow, maxRow);\r\n\r\n            for (let row = minRow; row <= maxRow; row++) {\r\n                if (row !== opening) {\r\n                    toUpdate.push(new WallNode(row, column));\r\n                }\r\n            }\r\n\r\n            RecursiveDivisionAlgorithm.generateInnerWalls(toUpdate, minRow, maxRow, minColumn, column - 1, \"horizontal\");\r\n            RecursiveDivisionAlgorithm.generateInnerWalls(toUpdate, minRow, maxRow, column + 1, maxColumn, \"horizontal\");\r\n        }\r\n        if (direction === \"horizontal\") {\r\n            if (maxColumn - minColumn < 2) return;\r\n\r\n            const row = RecursiveDivisionAlgorithm.generateRandomEven(minRow, maxRow);\r\n            const opening = RecursiveDivisionAlgorithm.generateRandomOdd(minColumn, maxColumn);\r\n\r\n            for (let column = minColumn; column <= maxColumn; column++) {\r\n                if (column !== opening) {\r\n                    toUpdate.push(new WallNode(row, column));\r\n                }\r\n            }\r\n\r\n            RecursiveDivisionAlgorithm.generateInnerWalls(toUpdate, minRow, row - 1, minColumn, maxColumn, \"vertical\");\r\n            RecursiveDivisionAlgorithm.generateInnerWalls(toUpdate, row + 1, maxRow, minColumn, maxColumn, \"vertical\");\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {ISettings} from \"../../types/ISettings\";\r\n\r\ninterface ISettingsContext {\r\n    settings: ISettings;\r\n    setSettings: React.Dispatch<React.SetStateAction<ISettings>>;\r\n}\r\n\r\nexport const SettingsContext = React.createContext<ISettingsContext>({\r\n    settings: {\r\n        shown: false,\r\n        pixelSize: 32,\r\n        legendShown: true,\r\n        speed: 0,\r\n    },\r\n    setSettings: () => {}\r\n});","import React from \"react\";\r\nimport {EditMode} from \"../../types/EditMode\";\r\n\r\ninterface IEditModeContext {\r\n    editMode: EditMode;\r\n    setEditMode: React.Dispatch<React.SetStateAction<EditMode>>;\r\n}\r\n\r\nexport const EditModeContext = React.createContext<IEditModeContext>({\r\n    editMode: EditMode.DRAG,\r\n    setEditMode: () => {},\r\n});","import React from \"react\";\r\n\r\ninterface IAlgorithmContext {\r\n    isRunnable: boolean;\r\n    isRunning: boolean;\r\n    hasChanges: boolean\r\n    hasPath: boolean;\r\n    setIsRunnable: React.Dispatch<React.SetStateAction<boolean>>;\r\n    setIsRunning: React.Dispatch<React.SetStateAction<boolean>>;\r\n    setHasChanges: React.Dispatch<React.SetStateAction<boolean>>;\r\n    setHasPath: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nexport const AlgorithmContext = React.createContext<IAlgorithmContext>({\r\n    isRunnable: false,\r\n    isRunning: false,\r\n    hasChanges: false,\r\n    hasPath: false,\r\n    setIsRunnable: () => null,\r\n    setIsRunning: () => null,\r\n    setHasChanges: () => null,\r\n    setHasPath: () => null,\r\n});","import {Algorithm} from \"../Algorithm\";\r\nimport {StartNode} from \"../../node/StartNode\";\r\nimport * as _ from \"lodash\";\r\nimport {Node} from \"../../node/Node\";\r\nimport {QueuedNode} from \"../../node/path/QueuedNode\";\r\nimport {TargetNode} from \"../../node/TargetNode\";\r\nimport {EmptyNode} from \"../../node/EmptyNode\";\r\nimport {ShortestNode} from \"../../node/ShortestNode\";\r\nimport {VisitedNode} from \"../../node/path/VisitedNode\";\r\nimport {PathNode} from \"../../node/path/PathNode\";\r\nimport {PathTargetNode} from \"../../node/path/PathTargetNode\";\r\nimport {PathStartNode} from \"../../node/path/PathStartNode\";\r\n\r\nexport class DepthFirstSearch extends Algorithm {\r\n    private static operations: [number, number][] = [\r\n        [-1, 0],\r\n        [0, 1],\r\n        [1, 0],\r\n        [0, -1]\r\n    ];\r\n\r\n    public static async run(startNode: StartNode, grid: Node[][], speed: number): Promise<[Node[][], number]> {\r\n        const cleanGrid = _.cloneDeep(grid);\r\n        let steps = 0;\r\n        const stack: Node[] = [startNode];\r\n        const toUpdate: Node[] = [];\r\n\r\n        while (stack.length > 0) {\r\n            const currentNode = stack.pop();\r\n\r\n            if (currentNode !== undefined) {\r\n                toUpdate.push(currentNode);\r\n                if (currentNode instanceof QueuedNode) {\r\n                    toUpdate.push(currentNode);\r\n                    const newNode = new VisitedNode(currentNode.getRow(), currentNode.getColumn(), currentNode.getPrevNode());\r\n                    toUpdate.push(newNode)\r\n                    grid[currentNode.getRow()][currentNode.getColumn()] = newNode;\r\n                } else if (currentNode instanceof PathTargetNode) {\r\n                    let prevNode = currentNode.getPrevNode();\r\n\r\n                    while (prevNode instanceof PathNode) {\r\n                        toUpdate.push(new ShortestNode(prevNode.getRow(), prevNode.getColumn()));\r\n                        prevNode = prevNode.getPrevNode();\r\n                    }\r\n\r\n                    toUpdate.push(new PathStartNode(prevNode.getRow(), prevNode.getColumn()));\r\n\r\n                    break;\r\n                }\r\n\r\n                this.operations.forEach(([deltaRow, deltaColumn]) => {\r\n                    const newRow = currentNode.getRow() + deltaRow;\r\n                    const newColumn = currentNode.getColumn() + deltaColumn;\r\n\r\n                    if (newRow >= 0 && newRow < grid.length && newColumn >= 0 && newColumn < grid[0].length) {\r\n                        let newNode = grid[newRow][newColumn];\r\n\r\n                        if (newNode instanceof TargetNode) {\r\n                            newNode = new PathTargetNode(newRow, newColumn, currentNode);\r\n                        } else if (newNode instanceof EmptyNode || newNode instanceof QueuedNode) {\r\n                            newNode = new QueuedNode(newRow, newColumn, currentNode);\r\n                        }\r\n\r\n                        if (newNode !== grid[newRow][newColumn]) {\r\n                            stack.push(newNode);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const newGrid = await DepthFirstSearch.draw(toUpdate, cleanGrid, speed);\r\n\r\n        return [newGrid, steps];\r\n    }\r\n}","import React, {forwardRef, useCallback, useContext, useImperativeHandle, useMemo, useRef, useState} from \"react\";\r\nimport {EditMode} from \"../../types/EditMode\";\r\nimport {EmptyNode} from \"../../classes/node/EmptyNode\";\r\nimport {Node} from \"../../classes/node/Node\";\r\nimport {WallNode} from \"../../classes/node/WallNode\";\r\nimport {StartNode} from \"../../classes/node/StartNode\";\r\nimport {TargetNode} from \"../../classes/node/TargetNode\";\r\nimport produce from \"immer\";\r\nimport {DoubleRightOutlined, LoginOutlined} from \"@ant-design/icons\";\r\nimport {IGridRefs} from \"../../types/IRefs\";\r\nimport {GridTable} from \"./GridTable\";\r\nimport {GridRow} from \"./GridRow\";\r\nimport {GridCell} from \"./GridCell\";\r\nimport {GridContainer} from \"./GridContainer\";\r\nimport {TransformComponent, TransformWrapper} from \"react-zoom-pan-pinch\";\r\nimport {BreadthFirstSearch} from \"../../classes/algorithm/pathfinding/BreadthFirstSearch\";\r\nimport * as _ from \"lodash\";\r\nimport {PathfindingAlgorithms} from \"../../types/PathfindingAlgorithms\";\r\nimport {RecursiveDivisionAlgorithm} from \"../../classes/algorithm/maze/RecursiveDivisionAlgorithm\";\r\nimport {SettingsContext} from \"../Context/SettingsContext\";\r\nimport {EditModeContext} from \"../Context/EditModeContext\";\r\nimport {AlgorithmContext} from \"../Context/AlgoirthmContext\";\r\nimport {MazeAlgorithms} from \"../../types/MazeAlgorithms\";\r\nimport {DepthFirstSearch} from \"../../classes/algorithm/pathfinding/DepthFirstSearch\";\r\n\r\ninterface IGridProps {\r\n\r\n}\r\n\r\nexport const Grid: React.ForwardRefExoticComponent<IGridProps & React.RefAttributes<IGridRefs>> = forwardRef((props, refs) => {\r\n    const [grid, setGrid] = useState<Node[][]>([]);\r\n    const {settings} = useContext(SettingsContext);\r\n    const {setIsRunnable, setIsRunning, setHasChanges, setHasPath} = useContext(AlgorithmContext);\r\n    const {editMode, setEditMode} = useContext(EditModeContext);\r\n    const calculatedPixelSize = useRef(settings.pixelSize);\r\n    const isPressed = useRef(false);\r\n    const isDrawing = useRef(false);\r\n    const startNode = useRef<StartNode | undefined>(undefined);\r\n    const targetNode = useRef<TargetNode | undefined>(undefined);\r\n    const nodesToUpdate = useMemo<Node[]>(() => {\r\n        return [];\r\n    }, []);\r\n\r\n    useImperativeHandle(refs, () => {\r\n        return {\r\n            runAlgorithm,\r\n            clearAll,\r\n            clearPath,\r\n        }\r\n    });\r\n\r\n    const clearAll = useCallback(async () => {\r\n        setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n            oldGrid.forEach((row, rowId) => {\r\n                row.forEach((node, colId) => {\r\n                    newGrid[rowId][colId] = new EmptyNode(rowId, colId);\r\n                });\r\n            });\r\n        }));\r\n        startNode.current = undefined;\r\n        targetNode.current = undefined;\r\n\r\n        setIsRunnable(false);\r\n        setHasChanges(false);\r\n        setHasPath(false);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n    }, [setIsRunnable, setHasChanges, setHasPath]);\r\n\r\n    const clearPath = useCallback(async () => {\r\n        setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n            oldGrid.forEach((row, rowId) => {\r\n                row.forEach((node, colId) => {\r\n                    const oldCell = oldGrid[rowId][colId];\r\n                    if (oldCell instanceof WallNode) {\r\n\r\n                    } else if (oldCell instanceof StartNode) {\r\n                        const newNode = new StartNode(rowId, colId);\r\n                        newGrid[rowId][colId] = newNode;\r\n                        startNode.current = newNode;\r\n                    } else if (oldCell instanceof TargetNode) {\r\n                        const newNode = new TargetNode(rowId, colId);\r\n                        newGrid[rowId][colId] = newNode;\r\n                        targetNode.current = newNode;\r\n                    } else {\r\n                        newGrid[rowId][colId] = new EmptyNode(rowId, colId);\r\n                    }\r\n                });\r\n            });\r\n        }));\r\n\r\n        setIsRunnable(startNode.current != null && targetNode.current != null);\r\n        setHasPath(false);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 0));\r\n    }, [setIsRunnable, setHasPath]);\r\n\r\n    const runAlgorithm = useCallback(async (algorithm: PathfindingAlgorithms | MazeAlgorithms) => {\r\n        let newGrid: Node[][] = grid;\r\n        let steps = 0;\r\n\r\n        setEditMode(EditMode.DRAG);\r\n        setIsRunning(true);\r\n\r\n        switch (algorithm) {\r\n            case PathfindingAlgorithms.BREADTH: {\r\n                [newGrid, steps] = await BreadthFirstSearch.run(startNode.current!, _.cloneDeep(grid), settings.speed);\r\n                setIsRunnable(false);\r\n                setHasPath(true);\r\n                break;\r\n            }\r\n            case PathfindingAlgorithms.DEPTH: {\r\n                [newGrid, steps] = await DepthFirstSearch.run(startNode.current!, _.cloneDeep(grid), settings.speed);\r\n                setIsRunnable(false);\r\n                setHasPath(true);\r\n                break;\r\n            }\r\n            case MazeAlgorithms.RECURSIVE_MAZE: {\r\n                newGrid = await RecursiveDivisionAlgorithm.run(_.cloneDeep(grid));\r\n                setHasChanges(true);\r\n            }\r\n        }\r\n\r\n        console.log(steps)\r\n\r\n        setGrid(newGrid);\r\n        setIsRunning(false);\r\n    }, [grid, setGrid, settings.speed, setEditMode, setIsRunning, setIsRunnable, setHasChanges, setHasPath]);\r\n\r\n    const buildGrid = useCallback((element: HTMLDivElement | null) => {\r\n        if (element !== null) {\r\n            let rows: number = Math.floor(element.clientHeight / settings.pixelSize);\r\n            let cols: number = Math.floor(element.clientWidth / settings.pixelSize);\r\n\r\n            if (rows % 2 === 0) {\r\n                rows -= 1;\r\n            }\r\n            if (cols % 2 === 0) {\r\n                cols -= 1;\r\n            }\r\n\r\n            calculatedPixelSize.current = Math.min(element.clientWidth / cols, element.clientHeight / rows);\r\n\r\n            startNode.current = undefined;\r\n            targetNode.current = undefined;\r\n\r\n            setIsRunnable(false);\r\n            setHasChanges(false);\r\n            setHasPath(false);\r\n            setGrid(Array.from(Array(rows), (value, row) => Array.from(Array(cols), (value, column) => new EmptyNode(row, column))));\r\n        }\r\n    }, [settings.pixelSize, setIsRunnable, setHasChanges, setHasPath]);\r\n\r\n    const handleMouseDown = useCallback((event: React.MouseEvent<HTMLDivElement>, row: number, column: number) => {\r\n        event.preventDefault();\r\n        switch (editMode) {\r\n            case EditMode.WALLS: {\r\n                const isPresent = event.currentTarget.classList.toggle(\"wall\");\r\n                nodesToUpdate.push(isPresent ? new WallNode(row, column) : new EmptyNode(row, column));\r\n                isPressed.current = true;\r\n                isDrawing.current = isPresent;\r\n                setHasChanges(true);\r\n                break;\r\n            }\r\n            case EditMode.START: {\r\n                if (startNode.current === undefined) {\r\n                    const newNode = new StartNode(row, column)\r\n                    setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n                        newGrid[row][column] = newNode;\r\n                    }));\r\n                    startNode.current = newNode;\r\n                } else if (startNode.current.getRow() === row && startNode.current.getColumn() === column) {\r\n                    setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n                        newGrid[row][column] = new EmptyNode(row, column);\r\n                    }));\r\n                    startNode.current = undefined;\r\n                }\r\n                setHasChanges(true);\r\n                break;\r\n            }\r\n            case EditMode.TARGET: {\r\n                if (targetNode.current === undefined) {\r\n                    const newNode = new TargetNode(row, column)\r\n                    setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n                        newGrid[row][column] = newNode;\r\n                    }));\r\n                    targetNode.current = newNode;\r\n                } else if (targetNode.current.getRow() === row && targetNode.current.getColumn() === column) {\r\n                    setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n                        newGrid[row][column] = new EmptyNode(row, column);\r\n                    }));\r\n                    targetNode.current = undefined;\r\n                }\r\n                setHasChanges(true);\r\n                break;\r\n            }\r\n        }\r\n        setIsRunnable(startNode.current != null && targetNode.current != null);\r\n    }, [nodesToUpdate, editMode, setIsRunnable, setHasChanges]);\r\n\r\n    const handleMouseOver = useCallback((event: React.MouseEvent<HTMLDivElement>, row: number, column: number) => {\r\n        event.preventDefault();\r\n        if (isPressed.current) {\r\n            switch (editMode) {\r\n                case EditMode.WALLS: {\r\n                    if (isDrawing.current) {\r\n                        event.currentTarget.classList.add(\"wall\");\r\n                    } else {\r\n                        event.currentTarget.classList.remove(\"wall\");\r\n                    }\r\n                    nodesToUpdate.push(isDrawing.current ? new WallNode(row, column) : new EmptyNode(row, column));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }, [nodesToUpdate, editMode]);\r\n\r\n    const handleMouseUp = useCallback( (event: React.MouseEvent<HTMLDivElement>) => {\r\n        event.preventDefault();\r\n        switch (editMode) {\r\n            case EditMode.WALLS:\r\n                setGrid((oldGrid) => produce(oldGrid, (newGrid) => {\r\n                    nodesToUpdate.forEach((node) => {\r\n                        newGrid[node.getRow()][node.getColumn()] = node;\r\n                    });\r\n                }));\r\n                isPressed.current = false;\r\n                break;\r\n        }\r\n    }, [nodesToUpdate, editMode]);\r\n\r\n    return (\r\n        <GridContainer ref={buildGrid}>\r\n            <TransformWrapper wheel={{step: 200}}\r\n                              pan={{disabled: editMode !== EditMode.DRAG}}>\r\n                <TransformComponent>\r\n                    <GridTable>\r\n                        {grid.map((nodes, rowId) => (\r\n                            <GridRow key={rowId}>\r\n                                {nodes.map((node) => (\r\n                                    <GridCell key={node.getId()}\r\n                                              pixelSize={calculatedPixelSize.current}\r\n                                              className={node.toString()}\r\n                                              id={node.getId()}\r\n                                              onMouseDown={(event) => handleMouseDown(event, node.getRow(), node.getColumn())}\r\n                                              onMouseOver={(event) => handleMouseOver(event, node.getRow(), node.getColumn())}\r\n                                              onMouseUp={(event) => handleMouseUp(event)}>\r\n                                        {node instanceof StartNode && <DoubleRightOutlined />}\r\n                                        {node instanceof TargetNode && <LoginOutlined />}\r\n                                    </GridCell>\r\n                                ))}\r\n                            </GridRow>\r\n                        ))}\r\n                    </GridTable>\r\n                </TransformComponent>\r\n            </TransformWrapper>\r\n        </GridContainer>\r\n    )\r\n})\r\n\r\n","import React, {useContext} from \"react\";\r\nimport {Button, Divider, Space} from \"antd\";\r\nimport {\r\n    BuildOutlined,\r\n    CloseOutlined,\r\n    DoubleRightOutlined,\r\n    DragOutlined,\r\n    LoginOutlined,\r\n    PlusSquareOutlined,\r\n    RiseOutlined,\r\n    SettingOutlined\r\n} from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport {EditMode} from \"../types/EditMode\";\r\nimport {SettingsContext} from \"./Context/SettingsContext\";\r\nimport produce from \"immer\";\r\nimport {AlgorithmContext} from \"./Context/AlgoirthmContext\";\r\nimport {EditModeContext} from \"./Context/EditModeContext\";\r\n\r\ninterface ISelectionBarProps {\r\n    onClickClearAll: () => void;\r\n    onClickClearPath: () => void;\r\n    onClickCreateMaze: () => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    \r\n    width: 100%;\r\n    \r\n    padding: 8px 64px;\r\n    background-color: var(--background-dark);\r\n    border-bottom: var(--border);\r\n`\r\n\r\nexport const SelectionBar: React.FunctionComponent<ISelectionBarProps> = ({onClickClearAll, onClickClearPath, onClickCreateMaze}) => {\r\n    const {setSettings} = useContext(SettingsContext);\r\n    const {isRunning,  hasChanges, hasPath} = useContext(AlgorithmContext);\r\n    const {editMode, setEditMode} = useContext(EditModeContext);\r\n\r\n    return (\r\n        <Container>\r\n            <Space split={<Divider type=\"vertical\" />}>\r\n                <Space>\r\n                    <Button type={editMode === EditMode.DRAG ? \"link\" : \"text\"}\r\n                            size=\"small\"\r\n                            onClick={() => setEditMode(EditMode.DRAG)}\r\n                            icon={<DragOutlined />}>\r\n                        Drag\r\n                    </Button>\r\n                    <Button type={editMode === EditMode.START ? \"link\" : \"text\"}\r\n                            size=\"small\"\r\n                            disabled={isRunning}\r\n                            onClick={() => setEditMode(EditMode.START)}\r\n                            icon={<DoubleRightOutlined />}>\r\n                        Start\r\n                    </Button>\r\n                    <Button type={editMode === EditMode.TARGET ? \"link\" : \"text\"}\r\n                            size=\"small\"\r\n                            disabled={isRunning}\r\n                            onClick={() => setEditMode(EditMode.TARGET)}\r\n                            icon={<LoginOutlined />}>\r\n                        Target\r\n                    </Button>\r\n                    <Button type={editMode === EditMode.WALLS ? \"link\" : \"text\"}\r\n                            size=\"small\"\r\n                            disabled={isRunning}\r\n                            onClick={() => setEditMode(EditMode.WALLS)}\r\n                            icon={<PlusSquareOutlined />}>\r\n                        Walls\r\n                    </Button>\r\n                </Space>\r\n                <Space>\r\n                    <Button type=\"text\"\r\n                            size=\"small\"\r\n                            disabled={isRunning || hasChanges}\r\n                            onClick={onClickCreateMaze}\r\n                            icon={<BuildOutlined />}>\r\n                        Random Maze\r\n                    </Button>\r\n                </Space>\r\n            </Space>\r\n            <Space split={<Divider type=\"vertical\" />}>\r\n                <Button type=\"text\"\r\n                        size=\"small\"\r\n                        disabled={isRunning || !hasPath}\r\n                        onClick={onClickClearPath}\r\n                        icon={<RiseOutlined />}>\r\n                    Clear Path\r\n                </Button>\r\n                <Button type=\"text\"\r\n                        danger\r\n                        size=\"small\"\r\n                        disabled={isRunning || !hasChanges}\r\n                        onClick={onClickClearAll}\r\n                        icon={<CloseOutlined />}>\r\n                    Clear All\r\n                </Button>\r\n                <Button type=\"text\"\r\n                        size=\"small\"\r\n                        disabled={isRunning}\r\n                        onClick={() => setSettings((oldSettings) => produce(oldSettings, (newSettings) => {newSettings.shown = true}))}\r\n                        icon={<SettingOutlined />} />\r\n            </Space>\r\n        </Container>\r\n    )\r\n}","import React, {useContext} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Card, Space, Typography} from \"antd\";\r\nimport {DoubleRightOutlined, LoginOutlined} from \"@ant-design/icons\";\r\nimport {SettingsContext} from \"./Context/SettingsContext\";\r\nimport produce from \"immer\";\r\n\r\ninterface ILegendProps {\r\n\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: absolute;\r\n  width: 175px;\r\n  left: 36px;\r\n  bottom: 36px;\r\n  box-shadow: var(--shadow);\r\n  \r\n  &.hide {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst Wall = styled.div`\r\n  width: 14px;\r\n  height: 14px;\r\n  display: inline-block;\r\n  background-color: #262626;\r\n  transform: translateY(3px);\r\n`\r\n\r\nconst Shortest = styled.div`\r\n  width: 14px;\r\n  height: 14px;\r\n  display: inline-block;\r\n  background-color: #ff4d4f;\r\n  transform: translateY(3px);\r\n`\r\n\r\nexport const Legend: React.FunctionComponent<ILegendProps> = () => {\r\n    const {settings, setSettings} = useContext(SettingsContext);\r\n\r\n    return (\r\n        <Container className={settings.legendShown ? \"\" : \"hide\"}>\r\n            <Card title=\"Legend\"\r\n                  size=\"small\"\r\n                  extra={\r\n                      <Typography.Link onClick={() => setSettings((oldSettings) => produce(oldSettings, (newSettings) => {newSettings.legendShown = false}))}>\r\n                          Hide\r\n                      </Typography.Link>\r\n                  }>\r\n                <Space direction=\"vertical\">\r\n                    <Typography.Text><DoubleRightOutlined /> : Start Node</Typography.Text>\r\n                    <Typography.Text><LoginOutlined /> : Target Node</Typography.Text>\r\n                    <Typography.Text><Wall /> : Wall Node</Typography.Text>\r\n                    <Typography.Text><Shortest /> : Shortest Path</Typography.Text>\r\n                </Space>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}","import React, {useCallback, useContext, useState} from \"react\";\r\nimport {Checkbox, Col, Modal, Row, Slider} from \"antd\";\r\nimport {SettingsContext} from \"./Context/SettingsContext\";\r\nimport produce from \"immer\";\r\n\r\ninterface ISettingsProps {\r\n\r\n}\r\n\r\nexport const Settings: React.FunctionComponent<ISettingsProps> = () => {\r\n    const {settings, setSettings} = useContext(SettingsContext);\r\n    const [pixelSize, setPixelSize] = useState(settings.pixelSize);\r\n    \r\n    const handleCancelClick = useCallback(() => {\r\n        setSettings((oldSettings) => produce(oldSettings, (newSettings) => {\r\n            newSettings.shown = false;\r\n        }))\r\n    }, [setSettings]);\r\n\r\n    const handleOkClick = useCallback(() => {\r\n        setSettings(produce(settings, (newSettings) => {\r\n            newSettings.shown = false;\r\n            newSettings.pixelSize = pixelSize;\r\n        }));\r\n    }, [settings, setSettings, pixelSize]);\r\n\r\n    return (\r\n        <Modal title=\"Settings\"\r\n               visible={settings.shown}\r\n               onCancel={handleCancelClick}\r\n               onOk={handleOkClick}>\r\n            <Row gutter={8}>\r\n                <Col span={6}>Grid Size</Col>\r\n                <Col span={18}>\r\n                    <Slider defaultValue={(pixelSize - 12) / 4}\r\n                            min={1}\r\n                            max={10}\r\n                            step={1}\r\n                            onChange={(size: number) => {\r\n                                setPixelSize(12 + 4 * size);\r\n                            }} />\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={8}>\r\n                <Col span={6}>Speed (MS)</Col>\r\n                <Col span={18}>\r\n                    <Slider defaultValue={settings.speed}\r\n                            min={0}\r\n                            max={1000}\r\n                            step={100}\r\n                            onChange={(speed: number) => setSettings((oldSettings) => produce(oldSettings, (newSettings) => {\r\n                                newSettings.speed = speed;\r\n                            }))} />\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={8}>\r\n                <Col span={6}>Show legend</Col>\r\n                <Col span={18}>\r\n                    <Checkbox checked={settings.legendShown}\r\n                              onChange={() => setSettings((oldSettings) => produce(oldSettings, (newSettings) => {\r\n                                  newSettings.legendShown = !oldSettings.legendShown;\r\n                              }))} />\r\n                </Col>\r\n            </Row>\r\n        </Modal>\r\n    )\r\n}","import React, {useCallback, useContext, useState} from \"react\";\r\nimport {Button, Divider, Select, Space, Typography} from \"antd\";\r\nimport {GithubOutlined, InfoCircleOutlined} from \"@ant-design/icons\";\r\nimport styled from \"styled-components\";\r\nimport {PathfindingAlgorithms} from \"../types/PathfindingAlgorithms\";\r\nimport {AlgorithmContext} from \"./Context/AlgoirthmContext\";\r\nimport {Algorithm} from \"../classes/algorithm/Algorithm\";\r\n\r\ninterface IHeaderProps {\r\n    onClickRunPathfinding: (algorithm: PathfindingAlgorithms) => void;\r\n}\r\n\r\nconst HeaderContainer = styled.header`\r\n    z-index: 99;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  \r\n    width: 100%;\r\n    height: 72px;\r\n  \r\n    padding: 16px 64px;\r\n  \r\n    background-color: var(--background);\r\n    border-bottom: var(--border);\r\n`\r\n\r\nconst GithubLink = styled.a`\r\n  font-size: 24px;\r\n`\r\n\r\nexport const Header: React.FunctionComponent<IHeaderProps> = ({onClickRunPathfinding}) => {\r\n    const [algorithm, setAlgorithm] = useState<PathfindingAlgorithms | undefined>(undefined);\r\n    const {isRunnable, isRunning} = useContext(AlgorithmContext);\r\n\r\n    const handleRunPathfinding = useCallback(() => {\r\n        if (isRunning) {\r\n            Algorithm.isStopped = true;\r\n        }\r\n        if (algorithm !== undefined && !isRunning) {\r\n            onClickRunPathfinding(algorithm);\r\n        }\r\n    }, [algorithm, isRunning, onClickRunPathfinding]);\r\n\r\n    return (\r\n        <HeaderContainer>\r\n            <Space split={<Divider type=\"vertical\" />}>\r\n                <Typography.Title level={3} style={{marginBottom: 0}}>\r\n                    Pathfinding Visualized\r\n                </Typography.Title>\r\n                <GithubLink href=\"https://github.com/philipplentzen/pathfinding_visualized\" target=\"_blank\">\r\n                    <GithubOutlined />\r\n                </GithubLink>\r\n            </Space>\r\n            <Space split={<Divider type=\"vertical\" />}>\r\n                <div>\r\n                    <Button type=\"text\"\r\n                            size=\"large\"\r\n                            disabled={algorithm === undefined}\r\n                            icon={<InfoCircleOutlined />}\r\n                            style={{display: algorithm === undefined ? \"none\" : \"\"}}/>\r\n                    <Select placeholder=\"Select algorithm\"\r\n                            value={algorithm}\r\n                            disabled={isRunning}\r\n                            size=\"large\"\r\n                            onSelect={(value) => setAlgorithm(value)}\r\n                            style={{width: 200}}>\r\n                        {Object.entries(PathfindingAlgorithms).map(([key, algorithm]) => (\r\n                            <Select.Option value={algorithm} key={key}>{algorithm}</Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                </div>\r\n                <Button type=\"primary\"\r\n                        size=\"large\"\r\n                        danger={isRunning}\r\n                        disabled={(algorithm === undefined || !isRunnable) && !isRunning}\r\n                        onClick={() => handleRunPathfinding()}\r\n                        style={{width: 100}}>\r\n                    {isRunning ? \"Stop!\" : \"Run!\"}\r\n                </Button>\r\n            </Space>\r\n        </HeaderContainer>\r\n    );\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Header} from \"./Header\";\r\nimport {PathfindingAlgorithms} from \"../types/PathfindingAlgorithms\";\r\n\r\ninterface ILayoutProps extends React.ComponentPropsWithoutRef<any> {\r\n    handleRunPathfinding: (algorithm: PathfindingAlgorithms) => void;\r\n}\r\n\r\nconst Content = styled.main`\r\n    position: relative;\r\n    height: calc(100% - 73px);\r\n`\r\n\r\nexport const Layout: React.FunctionComponent<ILayoutProps> = ({handleRunPathfinding, children}) => {\r\n    return (\r\n        <>\r\n            <Header onClickRunPathfinding={handleRunPathfinding}/>\r\n            <Content>\r\n                {children}\r\n            </Content>\r\n        </>\r\n    )\r\n}","import React, {useCallback, useRef, useState} from \"react\";\r\nimport {Grid} from \"../components/Grid/Grid\";\r\nimport {SelectionBar} from \"../components/SelectionBar\";\r\nimport {Legend} from \"../components/Legend\";\r\nimport {Settings} from \"../components/Settings\";\r\nimport {IGridRefs} from \"../types/IRefs\";\r\nimport {EditMode} from \"../types/EditMode\";\r\nimport {PathfindingAlgorithms} from \"../types/PathfindingAlgorithms\";\r\nimport {AlgorithmContext} from \"../components/Context/AlgoirthmContext\";\r\nimport {SettingsContext} from \"../components/Context/SettingsContext\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ISettings} from \"../types/ISettings\";\r\nimport {EditModeContext} from \"../components/Context/EditModeContext\";\r\nimport {MazeAlgorithms} from \"../types/MazeAlgorithms\";\r\n\r\ninterface IAlgorithmPageProps {\r\n\r\n}\r\n\r\nexport const AlgorithmPage: React.FunctionComponent<IAlgorithmPageProps> = () => {\r\n    const [settings, setSettings] = useState<ISettings>({\r\n        shown: false,\r\n        pixelSize: 32,\r\n        legendShown: true,\r\n        speed: 0,\r\n    });\r\n    const [isRunnable, setIsRunnable] = useState(false);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [hasChanges, setHasChanges] = useState(false);\r\n    const [hasPath, setHasPath] = useState(false);\r\n    const [editMode, setEditMode] = useState(EditMode.DRAG);\r\n    const gridRef = useRef<IGridRefs>(null);\r\n\r\n    const handleRunAlgorithm = useCallback((algorithm: PathfindingAlgorithms | MazeAlgorithms) => {\r\n        gridRef.current?.runAlgorithm(algorithm);\r\n    }, []);\r\n\r\n    const handleClearAll = useCallback(() => {\r\n        gridRef.current?.clearAll();\r\n    }, []);\r\n\r\n    const handleClearPath = useCallback(() => {\r\n        gridRef.current?.clearPath();\r\n    }, []);\r\n\r\n    const algorithmContext = {\r\n        isRunnable,\r\n        isRunning,\r\n        hasChanges,\r\n        hasPath,\r\n        setIsRunnable,\r\n        setIsRunning,\r\n        setHasChanges,\r\n        setHasPath\r\n    }\r\n\r\n    return (\r\n        <SettingsContext.Provider value={{settings, setSettings}}>\r\n            <AlgorithmContext.Provider value={algorithmContext}>\r\n                <Layout handleRunPathfinding={handleRunAlgorithm}>\r\n                    <EditModeContext.Provider value={{editMode, setEditMode}}>\r\n                        <SelectionBar onClickClearAll={handleClearAll}\r\n                                      onClickClearPath={handleClearPath}\r\n                                      onClickCreateMaze={() => handleRunAlgorithm(MazeAlgorithms.RECURSIVE_MAZE)} />\r\n                        <Grid ref={gridRef} />\r\n                    </EditModeContext.Provider>\r\n                    <Legend />\r\n                    <Settings />\r\n                </Layout>\r\n            </AlgorithmContext.Provider>\r\n        </SettingsContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport \"antd/dist/antd.css\";\nimport {GlobalStyle} from \"./styles/GlobalStyle\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {AlgorithmPage} from \"./pages/AlgorithmPage\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <GlobalStyle />\n      <AlgorithmPage />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}